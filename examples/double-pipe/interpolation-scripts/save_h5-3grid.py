import numpy
from firedrake import *
from fir3dab import vtktools
import os

"""
This script takes the pvd files generated by make_vtu.py and interpolates them to
the higer order discretization for the 3-grid run. Run this script with the same number of cores
you want to run the p-sequencing with. These saved .xml.gz files are then used as initial guesses.
"""
comm = COMM_WORLD
nref = 2
N = 25

def before(dm, i):
    for p in range(*dm.getHeightStratum(1)):
        dm.setLabelValue("prolongation", p, i+1)

def after(dm, i):
    for p in range(*dm.getHeightStratum(1)):
        dm.setLabelValue("prolongation", p, i+2)

distribution_parameters = {"partition": True, "overlap_type": (DistributedMeshOverlapType.VERTEX, 2)}
mesh = RectangleMesh(N, N, 1.5, 1.0, distribution_parameters = distribution_parameters, comm=COMM_WORLD)
mh = MeshHierarchy(mesh, nref, reorder=True, callbacks=(before,after))
mesh = mh[-1]

for porder in range(2,5):
    Ve = FiniteElement("BDM", mesh.ufl_cell(), porder, variant="integral") # velocity
    Pe = FiniteElement("DG", mesh.ufl_cell(), (porder-1)) # pressure
    Ce = FiniteElement("DG", mesh.ufl_cell(), 0) # control
    Re = FiniteElement("R",  mesh.ufl_cell(), 0) # reals
    Ze = MixedElement([Ce, Ve, Pe, Re])
    Z  = FunctionSpace(mesh, Ze)
    z  = Function(Z)

    for branch in range(2):
        W = VectorFunctionSpace(mesh, "DG", 0)
        X = interpolate(SpatialCoordinate(mesh), W)
        vtu = vtktools.vtu("pvd/rho-%s-%s_0.pvtu"%(branch,porder))
        reader = lambda X: vtu.ProbeData(numpy.c_[X, numpy.zeros(X.shape[0])], "Solution").reshape((-1,))
        V = FunctionSpace(mesh, "DG", 0)
        rho = Function(V)
        rho.dat.data[:] = reader(X.dat.data_ro)
        z.split()[0].assign(rho)

        W = VectorFunctionSpace(mesh, "DG", porder, dim=2)
        X = interpolate(SpatialCoordinate(mesh), W)
        vtu = vtktools.vtu("pvd/u-%s-%s_0.pvtu"%(branch,porder))
        #reader = lambda X: vtu.ProbeData(numpy.c_[X, numpy.zeros(X.shape[0])], "Solution")[:,:]
        reader = lambda X: vtu.ProbeData(numpy.c_[X, numpy.zeros(X.shape[0])], "Solution")[:,:2]
        V = VectorFunctionSpace(mesh, "DG", porder, dim=2)
        u = Function(V)
        u.dat.data[:] = reader(X.dat.data_ro)
        z.split()[1].interpolate(u)

        W = VectorFunctionSpace(mesh, "DG", porder-1)
        X = interpolate(SpatialCoordinate(mesh), W)
        vtu = vtktools.vtu("pvd/p-%s-%s_0.pvtu"%(branch,porder))
        reader = lambda X: vtu.ProbeData(numpy.c_[X, numpy.zeros(X.shape[0])], "Solution").reshape((-1,))
        V = FunctionSpace(mesh, "DG", porder-1)
        p = Function(V)
        p.dat.data[:] = reader(X.dat.data_ro)
        z.split()[2].assign(p)


        if branch == 0:
            z.split()[3].assign(Constant(160.63845471))
        elif branch == 1:
            z.split()[3].assign(Constant(125.84891629))

        h5 = HDF5File("../initial-guess-3grid-p-%s/%s.xml.gz"%(porder,branch), "w", comm=comm)
        h5.write(z, "/guess")
        del h5
